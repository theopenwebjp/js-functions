export function getWrappedStrings(str: string, wrapperOpen: string, wrapperClose: string, keepWrapper?: boolean, useClosingTagEnd?: boolean): string[];
export function asyncCheck(callback: Function): void;
export function promisify(handle: Function, args: any[], resolveIndex: number): Promise<any>;
export function asyncHandler(arr: import('./types/ts/index.js').AsyncHandlerItem[], onEnd: Function): boolean;
export function equals(a: any, b: any): boolean;
export function arrayEquals(a: any[], b: any[]): boolean;
export function exists(data: any): boolean;
export function buildMediaQuery(dimensions: import('./types/ts/index.js').Dimensions): string;
export function promptPrint(): void;
export function log(data: any, options?: import('./types/ts/index.js').LogOptions | undefined): false | undefined;
export function getDataUrlExtension(dataUrl: string): string;
export function download(data: any, name: string, mimeType: string): boolean;
export function downloadCurrentPage(): boolean;
export function getFileName(url: string): string;
export function getFileExtension(url: string): string;
export function downloadDataUrl(dataUrl: string, name: string): void;
export function downloadBlob(blob: Blob, name: string): boolean;
export function downloadBlobURL(blobURL: string, name?: string): void;
export function downloadLink(url: string, fullName: string): void;
export function toObject(data: any, onError?: Function | undefined): Object;
export function parseFuzzyJson(str: string): Object;
export function parseJson(str: string): Object | null;
export function stringifyJson(jsonObj: string): string | null;
export function loadFiles(urls: string[], onData: Function): Promise<any[]>;
export function loadFile(url: string, callback: (arg0: any) => void, onError?: ((arg0: Error | any) => void) | undefined): XMLHttpRequest;
export function handleCallback(this: any, callback: (...args: any[]) => any, args: any[]): any;
export function downloadData(data: any, name: string): boolean;
export function handlePrompt(handle: Function, text: string, defaultText: string): any;
export function getCurrentDate(): Date;
export function getFormattedString(str: string, delimiter: string, lenArr: number[]): string;
export function getCurrentLocation(callback: Function): void;
export function loadFileInput(event: DragEvent | Event, callback: Function, options: {
    method: import('./types/ts/index.js').FILE_READER_METHOD_NAMES;
}): FileReader;
export function convertTabbedDataToArray(data: string, colCount: number): Array<never[]> | Array<string[]>;
export function replaceAll(str: string, find: string, replace: string): string;
export function getLoadScriptHandle(src: string, parent: HTMLElement): Promise<Event>;
export function getLoadStyleSheetHandle(src: string, parent: HTMLElement): Promise<Event>;
export function getLoadTemplateHandle(src: string, parent: HTMLElement): Promise<Event>;
export function loadAbstractUrls(arr: string[], handle: (arg0: string, arg1: HTMLElement) => any, options?: Partial<import('./types/ts/index.js').MultipleUrlLoadingOptions>): Promise<any[]>;
export function loadDependencyUrls(arr: string[], options?: Object): Promise<any[]>;
export function loadStyleSheets(arr: string[], optionsAbstract?: Object): Promise<any[]>;
export function loadScripts(arr: string[], optionsAbstract?: Object): Promise<any[]>;
export function loadScriptData(data: string, onLoad: Function): HTMLElement;
export function camelCaseToArray(str: string): string[];
export function isCapitalLetter(char: string): boolean;
export function capitalize(str: string): string;
export function getIndexOf(data: any, find: any): string | number;
export function delimiterStringToArray(str: string, format: string): string[];
export function getStringSimilarity(str1: string, str2: string): number;
export function getStringInclusionWeight(str1: string, str2: string): number;
export function getNumberSimilarity(num1: number, num2: number): number;
export function getMax(...args: number[]): number | null;
export function getMin(...args: number[]): number | null;
export function removeNonCharacters(str: string): string;
export function isNativeFunction(func: Function): boolean;
export function buildFunctionModule(funcs: Function[]): string;
export function isLogFunction(func: Function): boolean;
export function getStackInfo(): Object;
export function loopClassFunctions(classInstance: import("./object-helpers.js").Dictionary, onFunction: (arg0: (...args: any[]) => any, arg1: string, arg2: {
    [x: string]: any;
}) => void): void;
export function loopClassProperties(classInstance: import("./object-helpers.js").Dictionary, onProperty: (property: string, name: string, classInstance: import('./object-helpers.js').Dictionary) => void): void;
export function loopClass(classInstance: object, onVariable: (arg0: string) => void): void;
export function loopStaticClassMethods(): void;
export function bindClassThis(classInstance: import("./object-helpers.js").Dictionary): void;
export function applyStaticFunctions(classInstance: import("./object-helpers.js").Dictionary, constructor: Function): void;
export function getStaticFunctionNames(constructor: any): string[];
export function getStaticFunctions(constructor: any): {
    [k: string]: any;
};
export function reduceObjectArray(objArr: {
    [x: string]: number;
}[]): {
    [x: string]: number;
};
export function waitFor(condition: Function, pollInterval?: number): Promise<void>;
export function sleep(ms: number): Promise<void>;
export function handleEvent(events: import("./object-helpers.js").Dictionary, name: string, data?: any, options?: Partial<import('./types/ts/index.js').EventOptions>): any;
export function mergeEventsObject(events1: Object, events2: Object): Object;
export function urlToBlob(url: string): Promise<any>;
export function timeout(promise: Promise<any>, ms: number): Promise<any>;
export function getPromisesByState(promises: Promise<any>[], resolved?: boolean): Promise<Promise<boolean>[]>;
export function promiseAll(arr: (() => Promise<any>)[], ordered?: boolean): Promise<any[]>;
export function createDataURI(data: string, mimeType?: string, options?: import("./object-helpers.js").Dictionary): string;
export function compare(a: any, b: any, comparator?: string): boolean;
export function isMinimzed(str: string): import('./types/ts/index.js').ProbabilityBoolean;
export function watchForHashValue(value: string, func: Function): void;
export function scanString(string: string, checker: Function): import('./types/ts/index.js').StringPosition[];
export function replaceStringIndexes(string: string, indexes?: [string, number, number][], sortRequired?: boolean): string;
export function replaceAt(string: string, replacer: string, startIndex: number, endIndex: number): string;
export function generateRandomString(length?: number): string;
export function fixPageAnchorTagSecurity(): void;
export function setSpaceDelimitedElementAttribute(element: HTMLElement, attribute: string, values?: string[]): void;
export function preventSubmit(form: HTMLFormElement): void;
export function replaceAt2(string: string, fromIndex: number, length: number, replacement: string): string;
export function toTemplate(html?: string): HTMLTemplateElement;
export function stringIncludesAttribute(text: string, name: string, value: string): boolean;
export function removeSubstringRanges(text: string, ranges?: import('./types/ts/index.js').ArrayRange[]): string;
export function setupCustomElement(customElement: import('./types/ts/index.js').CustomElement, options?: import('./types/ts/index.js').CustomElementOptions): void;
export function capitalizeFirstLetter(item: string): string;
export function delimitedArrayToReadableStringMap(array: string[], delimiter?: string | undefined): Object;
export function combineObjects(args: object[]): Object;
export function dataEquals(a: any, b: any): boolean;
export function objectDataEquals(a: any, b: any, looped?: any): boolean;
export function cleverSlice(arr: any[], from: number, to: number): any[];
export function getArguments(args: import('./types/ts/index.js').ArgumentsObject, from: number, to: number): any[];
export function dataInArray(data: any, arr: any[]): boolean;
export function copyVariable(variable: any, keepReferences?: boolean): any;
export function createMultiple(variable: any, count: number, keepReferences?: boolean): any[];
export function toReadableString(data: any): string;
export function exportData(data: any): string | null;
export function getSimilarity(var1: any, var2: any): number;
export function getDataSet(data: any): Object;
export function executeAjax(dataSet: Object, url: string, options: import('./types/ts/index.js').AjaxResponseOptions): any;
export function getAjaxParams(obj: import('./object-helpers.js').Dictionary): string;
export function handleAjaxResponse(xhr: XMLHttpRequest, options: import('./types/ts/index.js').AjaxResponseOptions): any;
export function polyfill(object: any, polyfillMap: Record<any, any>): void;
export function failOnFalsy<T>(value: import("./types/ts/index.js").Falsy | T): Exclude<T, import("./types/ts/index.js").Falsy>;
export function createObjectKeyObserver(object: Object, keys?: string[]): ProxyConstructor;
export function observeObjectKeys(object: Object, key: string): () => void;
export function base64ToBytes(base64: string): Uint8Array;
export function bytesToBase64(base64: string): string;
export function atobUnicode(ascii: string): Uint8Array;
export function btoaUnicode(base64: string): string;
export function traverseObject(o: Object, onProperty: (parent: Object, key: string) => void): void;
//# sourceMappingURL=utilities.d.ts.map